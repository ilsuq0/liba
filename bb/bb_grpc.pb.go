// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package bb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BbClient is the client API for Bb service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BbClient interface {
	Chat(ctx context.Context, opts ...grpc.CallOption) (Bb_ChatClient, error)
}

type bbClient struct {
	cc grpc.ClientConnInterface
}

func NewBbClient(cc grpc.ClientConnInterface) BbClient {
	return &bbClient{cc}
}

func (c *bbClient) Chat(ctx context.Context, opts ...grpc.CallOption) (Bb_ChatClient, error) {
	stream, err := c.cc.NewStream(ctx, &Bb_ServiceDesc.Streams[0], "/bb.Bb/Chat", opts...)
	if err != nil {
		return nil, err
	}
	x := &bbChatClient{stream}
	return x, nil
}

type Bb_ChatClient interface {
	Send(*Snap) error
	Recv() (*Snap, error)
	grpc.ClientStream
}

type bbChatClient struct {
	grpc.ClientStream
}

func (x *bbChatClient) Send(m *Snap) error {
	return x.ClientStream.SendMsg(m)
}

func (x *bbChatClient) Recv() (*Snap, error) {
	m := new(Snap)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BbServer is the server API for Bb service.
// All implementations must embed UnimplementedBbServer
// for forward compatibility
type BbServer interface {
	Chat(Bb_ChatServer) error
	mustEmbedUnimplementedBbServer()
}

// UnimplementedBbServer must be embedded to have forward compatible implementations.
type UnimplementedBbServer struct {
}

func (UnimplementedBbServer) Chat(Bb_ChatServer) error {
	return status.Errorf(codes.Unimplemented, "method Chat not implemented")
}
func (UnimplementedBbServer) mustEmbedUnimplementedBbServer() {}

// UnsafeBbServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BbServer will
// result in compilation errors.
type UnsafeBbServer interface {
	mustEmbedUnimplementedBbServer()
}

func RegisterBbServer(s grpc.ServiceRegistrar, srv BbServer) {
	s.RegisterService(&Bb_ServiceDesc, srv)
}

func _Bb_Chat_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BbServer).Chat(&bbChatServer{stream})
}

type Bb_ChatServer interface {
	Send(*Snap) error
	Recv() (*Snap, error)
	grpc.ServerStream
}

type bbChatServer struct {
	grpc.ServerStream
}

func (x *bbChatServer) Send(m *Snap) error {
	return x.ServerStream.SendMsg(m)
}

func (x *bbChatServer) Recv() (*Snap, error) {
	m := new(Snap)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Bb_ServiceDesc is the grpc.ServiceDesc for Bb service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Bb_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bb.Bb",
	HandlerType: (*BbServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Chat",
			Handler:       _Bb_Chat_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "bb.proto",
}
